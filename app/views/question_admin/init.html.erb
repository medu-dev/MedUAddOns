<script type="text/javascript" xmlns="http://www.w3.org/1999/html">

  var add_icon = "/assets/add.png";
  var delete_icon = "/assets/delete.png";
  var card_delete_icon = "/assets/page_delete.png";
  var noSelection = -1;

  function addQuestion() {
    setTitle("Add a question");
    currentQuestionMode.makeAdd();
    clearQuestion();
    clearQuestionId();
    showQuestionDialog();
  }

  function editQuestion(id, question) {
    setTitle("Edit question");
    currentQuestionMode.makeEdit();
    setQuestion(question);
    setQuestionId(id);
    showQuestionDialog();
  }

  function fillQuestionList(questions) {

    var table = document.getElementById("questionListTable")

    // Remove all table rows
    var tableRows = table.rows;
    for (var i = tableRows.length-1; i >= 0; i--) {
      table.deleteRow(i);
    }

    if(questions.length == 0)  {
      var r = createTableRow(table, "");
      createTextCell(r, "", "No questions have been created, use the button to add one", "");
      return;
    }

    var lastQuestionId = "";
    var rowCount = 0;
    var row;
    var imgWidth = "25px";
    var bodyWidth = "250px";

    var tableHead = createTableRow(table, (rowCount % 2 != 0) ? 'odd':'');
    var th = createTextCell(tableHead, "th", "Questions", "");
    th.colSpan = 3;

    for(i=0; i < questions.length; i++) {

      if(questions[i].questions_id != lastQuestionId) {
        var row = createTableRow(table, (rowCount % 2 != 0) ? 'odd':'');
        rowCount++;

        var link = createAnchor(questions[i].body, questions[i].questions_id);
        createElementCell(row, "", link, bodyWidth);
        lastQuestionId = questions[i].questions_id;

        var img = createAddCardImg(questions[i].questions_id);
        createElementCell(row, "", img, imgWidth);

        img = createDeleteQuestionImg(questions[i].questions_id);
        createElementCell(row, "", img, imgWidth);
      }

      if(questions[i].card_id != null) {

        row = createTableRow(table, (rowCount % 2 != 0) ? 'odd':'');
        rowCount++;
        var cardText = questions[i].course_name + ": " + questions[i].card_id;
        createTextCell(row, "", cardText, bodyWidth);

        var img = createDeleteRelationshipImg(questions[i].relation_id);
        createElementCell(row, "", img, "imgWidth");
        createTextCell(row, "", "", "imgWidth");
      }
    }
  }

  function createAnchor(question, id) {
    var anchor = document.createElement('a');

    anchor.innerHTML ="<span class='categorySpan'> "+question +"</span>";

    anchor.onclick = function() {editQuestion(id, question);};

    return anchor;
  }

  function createImg(src, title) {
    var img = document.createElement('img');

    img.src = src;
    img.style.cursor="pointer";
    img.style.display = "block";
    img.title = title;
    return img;
  }

  function createDeleteQuestionImg(id) {
    var img = createImg(delete_icon, "Delete this question")
    img.onclick = function() {deleteQuestion(id);};

    return img;
  }

  function deleteQuestion(id) {
    if(confirm("Delete this question?")) {
      doDelete("delete_question", id, "Deleting question...")
    }
  }

  function deleteRelationship(id) {
    if(confirm("By removing this card id this question will no longer appear on the card. Proceed?")) {
      doDelete("delete_relationship", id, "Deleting card from question...")
    }
  }

  function createDeleteRelationshipImg(id) {
    var img = createImg(card_delete_icon, "Remove this card id. Then the question will no longer appear on this card")
    img.onclick = function() {deleteRelationship(id);};

    return img;
  }

  function createAddCardImg(id) {
    var img = createImg(add_icon, "Add a card id. Then this question will appear on that card. ")
    img.onclick = function() {addCard(id);};

    return img;
  }

  function addCard(question_id) {
    clearCard();
    setQuestionId(question_id);
    showCardDialog();

  }

  function getAll() {

    showProgressDialog("Getting questions...");

    $.ajax({
      url: "get_all",
      dataType: 'json',
      success: function(data, status, xhr) {
        if(hasErrors(data))
          return false;

        hideProgressDialog();
        fillQuestionList(data.message);
        getCourses();
      },
      error: function(xhr, status, error) {
        showMsg(error);
      }
    });
  }

  function getCourses() {
//    showProgressDialog("Getting course list...");

    $.ajax({
      url: "get_courses",
      dataType: 'json',
      success: function(data, status, xhr) {
        if(hasErrors(data))
          return false;

//        hideProgressDialog();
        setSelectList(data.message, "");
      },
      error: function(xhr, status, error) {
        showMsg(error);
        setSelectList("", "");
      }
    });
  }

  function doDelete(url, id, msg)  {
    showProgressDialog(msg);

    $.ajax({
      url: url,
      dataType: 'json',
      type: "POST",
      data:  {
        id: id
      },
      success: function(data, status, xhr) {
        if(hasErrors(data))
          return false;

        hideProgressDialog();
        fillQuestionList(data.message);
      },
      error: function(xhr, status, error) {
        showMsg(error);
      }
    });
  }

  function setSelectList(optionList, selected) {
    var noValue = "No selection";
    var element = $("#courseSelection");
    element.empty();

    if(optionList != null) {
      element.append("<option " + (selected == noSelection ? "selected='true'" : "")  + " value='" + noSelection + "'>" + noValue + "</option>");
      for(i = 0; i < optionList.length; i++) {
        element.append("<option " + (optionList[i] == selected ? "selected='true'" : "")  + " value='" + optionList[i].course_id + "'>" + optionList[i].course_name + "</option>");

      }
    }
    else {
      element.append("<option value='" + noSelection + "'>" + noValue + "</option>");
    }
  }

  function question_help() {
    window.open("question_help","Help","resizable=yes,scrollbars=yes,status=yes,location=yes,menubar=yes,toolbar=yes,width=800,height=800");
  }

  $(document).ready(function(){
    createProgressDialog();
    createQuestionDialog();
    createCardDialog();
    getAll();
  });

</script>
<div class="headerDiv">
  <img class="headerImg" src="/assets/addons_logo.png"/>
</div>

<div class="leftPanel">
  <div class="introDiv">
      Use part of the page to add questions to individual cards for cases. See the <a href="#" onclick="question_help()">help</a> for more information.
  </div>

  <div style="margin: 10px 5px;">
    <button type="button" onclick="addQuestion()">Add a question</button>
  </div>
  <div style="height: 90%;overflow: auto;">
    <table id="questionListTable"></table>
  </div>
</div>

<div class="rightPanel">
  <div class="introDiv">
    View the answers to questions here. <b>View Answers</b> will show the answers on the page. <b>Get answers as csv file</b>
    will create a csv file which can be downloaded.
  </div>
  <div style="margin: 10px 5px;">
    <button type="button" onclick="getAllAnswers()">View answers</button>
    <button type="button" onclick="create_csv()">Get answers as csv file</button>
  </div>
  <div style="height: 90%;overflow: auto;">
    <table id="answerTable"></table>
  </div>
</div>

<div id="progressDlg">
  <div id="progressText" ></div>
  <img src="/assets/progress.gif"/>
</div>
<div id="questionDlg">
  <textarea id="questionBody" rows="3" style="width:100%; padding:2px;"></textarea>
</div>
<div id="cardDlg">
  Select a course:&nbsp;<select id="courseSelection"></select> </p>
  Enter a card id:&nbsp;<input type="text" id="cardBody" style="width:100%; padding:2px;">
</div>

<form id="streamDownLoadId" action="/question_admin/stream_download" method="get"></form>
